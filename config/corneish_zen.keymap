/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "alias_42key.h"

#define L_DEFAULT   0
#define L_EXTEND    1
#define L_SYMBOL    2
#define L_FUNCTION  3
// #define L_WORDS     4
#define L_MACRO     4
#define L_CONTROL   5

// #define KEYS_LEFT_SIDE 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
// #define KEYS_RIGHT_SIDE 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
// #define KEYS_THUMBS 36 37 38 39 40 41

#define KEYS_LEFT_SIDE  LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_RIGHT_SIDE RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_THUMBS     LH2 LH1 LH0 RH0 RH1 RH2


#define QUICK_TAP_MS 175
#define MACRO_WAIT_MS 30
#define MACRO_TAP_MS 30

// Normal timeout for macros
#define MACRO_TIMEOUT_MS 50


&num_word {  // num-word, requires PR #1441
    layers = <L_SYMBOL>;
};

&lt {
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <QUICK_TAP_MS>;
};

&sl {
        ignore-modifiers;
};

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

/ {

        behaviors {
                hml: homerow_mods_left {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS_LEFT";
                        #binding-cells = <2>;
                        tapping-term-ms = <280>;
                        quick-tap-ms = <QUICK_TAP_MS>;
                        global-quick-tap-ms = <150>;   // requires PR #1387
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <KEYS_RIGHT_SIDE KEYS_THUMBS>;
                        hold-trigger-on-release;       // requires PR #1423
                };

                hmr: homerow_mods_right {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS_RIGHT";
                        #binding-cells = <2>;
                        tapping-term-ms = <280>;
                        quick-tap-ms = <QUICK_TAP_MS>;
                        global-quick-tap-ms = <150>;   // requires PR #1387
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <KEYS_LEFT_SIDE KEYS_THUMBS>;
                        hold-trigger-on-release;       // requires PR #1423
                };


                num_word_layer: behavior_num_word_layer {
                        // This creates a tap/hold behavior where tapping
                        // activates numword and holding is a temporary layer
                        // shift to numbers.
                        //
                        // Requires PR #1451.
                        //
                        // The first binding (param) to this behavior will be
                        // the momentary layer, and the second binding is
                        // ignored (but required by the underlying
                        // hold-tap behavior).
                        //
                        // Make sure to initialize the num-word behavior
                        // in the configuration.
                        compatible = "zmk,behavior-hold-tap";
                        label = "NUM_WORD_LAYER";
                        #binding-cells = <2>;
                        bindings = <&mo>, <&num_word>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <QUICK_TAP_MS>;
                };
        };

        macros {
                ZMK_MACRO(digraph_qu,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp Q &kp U>;
                )

                ZMK_MACRO(digraph_ue,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp U &kp E>;
                )

                ZMK_MACRO(symbol_double_equal,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp EQUAL &kp EQUAL>;
                )

                ZMK_MACRO(symbol_not_equal,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp LS(N1) &kp EQUAL &kp EQUAL>;
                )

//                 ZMK_MACRO(word_and,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp A &kp N &kp D>;
//                 )
//
//                 ZMK_MACRO(word_the,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp T &kp H &kp E>;
//                 )
//
//                 ZMK_MACRO(word_git,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp G &kp I &kp T>;
//                 )
//
//                 ZMK_MACRO(word_poetry,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp P &kp O &kp E &kp T &kp R &kp Y>;
//                 )
//
//                 ZMK_MACRO(word_class,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp C &kp L &kp A &kp S &kp S>;
//                 )
//
//                 ZMK_MACRO(word_def,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp D &kp E &kp F>;
//                 )
//
//                 ZMK_MACRO(word_true,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings
//                                 = <&macro_press &kp LSHIFT>
//                                 , <&macro_tap &kp T>
//                                 , <&macro_release &kp LSHIFT>
//                                 , <&macro_tap &kp R &kp U &kp E>;
//                 )
//
//                 ZMK_MACRO(word_false,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings
//                                 = <&macro_press &kp LSHIFT>
//                                 , <&macro_tap &kp F>
//                                 , <&macro_release &kp LSHIFT>
//                                 , <&macro_tap &kp A &kp L &kp S &kp E>;
//                 )
         };

        combos {
                compatible = "zmk,combos";

                combo_esc {
                        // Left hand, home row middle + index -> escape
                        bindings = <&kp ESC>;
                        key-positions = <LM1 LM2>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_tab {
                        bindings = <&kp TAB>;
                        key-positions = <LM2 LM3>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_enter {
                        bindings = <&kp ENTER>;
                        key-positions = <RM1 RM2 RM3>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_equals {
                        bindings = <&kp EQUAL>;
                        key-positions = <RM1 RM2>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_undo {
                        bindings = <&kp LC(Z)>;
                        key-positions = <LB4 LB3>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_cut {
                        bindings = <&kp LC(X)>;
                        key-positions = <LB4 LB2>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_copy {
                        bindings = <&kp LC(C)>;
                        key-positions = <LB3 LB2>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_paste {
                        bindings = <&kp LC(V)>;
                        key-positions = <LB2 LB1>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_select_all {
                        bindings = <&kp LC(A)>;
                        key-positions = <LB4 LB1>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_find {
                        bindings = <&kp LC(F)>;
                        key-positions = <LB1 LB0>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                // These combos are di/trigrams for English that are
                // more difficult to type with Colemak-DH.
                // The logic behind naming is
                // "combo_lettersPressed_lettersSent"

                combo_qw_qu {
                        bindings = <&digraph_qu>;
                        key-positions = <LT4 LT3>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };

                combo_uy_ue {
                        bindings = <&digraph_ue>;
                        key-positions = <RT2 RT3>;
                        layers = <L_DEFAULT>;
                        timeout-ms = <MACRO_TIMEOUT_MS>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "DEFAULT";
                        bindings = <
   &kp TAB        &kp Q       &kp W       &kp F        &kp P         &kp B                             &kp J               &kp L        &kp U        &kp Y       &kp SQT     &kp BSPC
   &sl L_FUNCTION &hml LGUI A &hml LALT R &hml LSHFT S &hml LCTRL T  &kp G                             &kp M               &hmr RCTRL N &hmr RSHFT E &hmr RALT I &hmr RGUI O &kp SEMI
   &kp LSHFT      &kp Z       &kp X       &kp C        &kp D         &kp V                             &kp K               &kp H        &kp COMMA    &kp DOT     &kp FSLH    &tog L_CONTROL
                                                       &kp BSPC      &sk LSHFT &key_repeat &sl L_MACRO &lt L_EXTEND SPACE  &num_word_layer L_SYMBOL 0
                        >;
                };

                extend_layer {
                        label = "EXTEND";
                        bindings = <
    &trans    &kp ESC   &kp K_BACK &kp LC(F) &kp K_FORWARD &kp INS                       &kp PG_UP &kp HOME      &kp UP    &kp END   &trans    &trans
    &kp LGUI  &sk LGUI  &sk LALT   &sk LSHFT &sk LCTRL     &trans                        &kp PG_DN &kp LEFT      &kp DOWN  &kp RIGHT &kp DEL   &trans
    &trans    &kp LC(Z) &kp LC(X)  &kp LC(C) &trans        &kp LC(V)                     &trans    &kp LG(LS(S)) &kp TAB   &kp K_APP &trans    &trans
                                             &trans        &trans    &trans    &trans    &trans &trans
                        >;
                };

                symbol_layer {
                        label = "SYMBOL";
                        bindings = <
    &kp TILDE &kp EXCL  &kp AT    &kp HASH &kp COLON &kp PRCNT                  &kp STAR  &kp N7   &kp N8   &kp N9   &kp PLUS  &trans
    &kp GRAVE &kp SEMI  &kp UNDER &kp LBKT &kp LPAR  &kp LBRC                   &kp EQUAL &kp N4   &kp N5   &kp N6   &kp MINUS &kp PIPE
    &trans    &kp CARET &kp DLLR  &kp RBKT &kp RPAR  &kp RBRC                   &kp N0    &kp N1   &kp N2   &kp N3   &kp FSLH  &kp BSLH
                                          &trans    &trans   &trans   &trans    &trans    &trans
                        >;
                };

                function_layer {
                        label = "FUNC";
                        bindings = <
    &trans   &trans   &trans   &trans    &trans    &sl L_CONTROL               &kp F12   &kp F7   &kp F8   &kp F9   &kp LC(PLUS)  &trans
    &trans   &sk LGUI &sk LALT &sk LSHFT &sk LCTRL &trans                      &kp F11   &kp F4   &kp F5   &kp F6   &kp LC(MINUS) &trans
    &trans   &trans   &trans   &trans    &trans    &trans                      &kp F10   &kp F1   &kp F2   &kp F3   &kp LC(0)     &trans
                                         &trans    &trans   &trans   &kp ENTER &kp ESC   &trans
                        >;
                };

//                 words_layer {
//                         label = "WORDS";
//                         bindings = <
//     &trans   &trans   &trans   &trans    &trans    &trans                     &trans   &word_def  &word_class  &trans   &trans   &trans
//     &trans   &trans   &trans   &word_and &word_the &trans                     &trans   &word_true &word_false  &trans   &trans   &trans
//     &trans   &trans   &trans   &trans    &trans    &trans                     &trans   &word_git  &word_poetry &trans   &trans   &trans
//                                          &trans    &trans   &trans   &trans   &trans   &trans
//                         >;
//                 };

                macro_layer {
                        label = "MACRO";
                        bindings = <
    &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans               &trans            &trans   &trans   &trans
    &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &symbol_double_equal &symbol_not_equal &trans   &trans   &trans
    &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans      &trans            &trans   &trans
                                        &trans   &trans   &trans   &trans   &trans   &trans
                        >;
                };

                control_layer {
                        label = "CONTROL";
                        bindings = <
    &bootloader &trans       &trans       &trans       &trans       &out OUT_USB                   &trans   &trans   &trans   &trans   &trans   &bootloader
    &reset      &trans       &trans       &trans       &trans       &out OUT_BLE                   &trans   &trans   &trans   &trans   &trans   &reset
    &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                   &trans   &trans   &trans   &trans   &trans   &trans
                                                       &trans       &trans       &trans   &trans   &trans   &trans
                        >;
                };
        };

//                 template {
//                         label = "EXTEND";
//                         bindings = <
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans
//                                         &trans   &trans   &trans   &trans   &trans   &trans
//                         >;
//                 };
};
