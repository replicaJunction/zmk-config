/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "alias_42key.h"

#define L_DEFAULT   0
#define L_EXTEND    1
#define L_SYMBOL    2
#define L_FUNCTION  3
// #define L_WORDS     4
#define L_CONTROL   4

#define QUICK_TAP_MS 175

&num_word {  // num-word, requires PR #1441
    layers = <L_SYMBOL>;
};

&lt {
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <QUICK_TAP_MS>;
};

&sl {
        ignore-modifiers;
};

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

   // The best home row mod (HRM) experience I've found comes with combining
    // a long "tapping term" with the new "require prior idle" setting in
    // ZMK's PR #1387. Using this feature, rapid typing does not generate
    // accidental modifiers, but when you've been idle for a certain amount
    // of time, you can easily trigger home row modifiers without waiting
    // forever and a day.
    //
    // For another layer of safety, I also use the "hold trigger key positions"
    // feature. This prevents the quick-tap behavior from firing with other
    // keys on the same side of the keyboard. In essense, to type Ctrl+A, I
    // must use the Ctrl key on the right half of the keyboard, since A is on
    // the left half of the keyboard.
    //
    // Combining these two settings is honestly magical. Home row mods have
    // never felt better.
    //
    // References:
    // * https://zmk.dev/docs/behaviors/hold-tap#require-prior-idle-ms
    // * https://zmk.dev/docs/behaviors/hold-tap#positional-hold-tap-and-hold-trigger-key-positions
    // * https://github.com/urob/zmk-config?tab=readme-ov-file#timeless-homerow-mods

    // Tap/hold behavior style
    // "holdiepreferred", "balanced", "tapiepreferred", "tap-unless-interrupted"
    #define HRM_BEHAVIOR "balanced"

    // This is intentonally very large because of the interaction with
    // require-prior-idle-ms. Basically, holding a key longer than this
    // delay allows combos that don't respect the hold-trigger-key-positions
    // setting, so it needs to be pretty large to prevent unintentional
    // holds.
    #define HRM_TAPPING_TERM_MS 280

    // If pressing any other key before a HRM key within this window,
    // the tap/hold configuration will be completely ignored and the
    // key will always be treated as a tap. This prevents a
    // long tapping-term-ms from feeling sluggish.
    // Introduced in ZMK PR #1387
    #define HRM_REQUIRE_PRIOR_IDLE_MS 150

    // Double-tap the key within this window to hold that keystroke
    // (instead of holding the modifier, press and hold the key, like
    // jjjjjjjjjjjjjjjjjjjjjjjjjjjjj)
    #define HRM_QUICK_TAP_MS 175

    // Combo configuration
    // -------------------

    // General combo timer - press both keys in this window to activate
    // a combo
    #define COMBO_TIMEOUT_MS 50

    // Combo values for the home row should be a bit tigher to prevent
    // misfires
    #define COMBO_TIMEOUT_MS_SHORT 35

    #define MACRO_WAIT_MS 30
    #define MACRO_TAP_MS 30

/ {

        behaviors {
                hml: homerow_mods_left {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS_LEFT";
                        flavor = HRM_BEHAVIOR;
                        tapping-term-ms = <HRM_TAPPING_TERM_MS>;
                        quick-tap-ms = <HRM_QUICK_TAP_MS>;
                        global-quick-tap-ms = <150>;   // requires PR #1387
                        hold-trigger-key-positions = <KEYS_RIGHT_SIDE KEYS_THUMBS>;
                        hold-trigger-on-release;       // requires PR #1423
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                };

                hmr: homerow_mods_right {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS_RIGHT";
                        flavor = HRM_BEHAVIOR;
                        tapping-term-ms = <HRM_TAPPING_TERM_MS>;
                        quick-tap-ms = <HRM_QUICK_TAP_MS>;
                        global-quick-tap-ms = <150>;   // requires PR #1387
                        hold-trigger-key-positions = <KEYS_LEFT_SIDE KEYS_THUMBS>;
                        hold-trigger-on-release;       // requires PR #1423
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                };

                hll: homerow_layer_left {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_LAYER_LEFT";
                        flavor = HRM_BEHAVIOR;
                        tapping-term-ms = <HRM_TAPPING_TERM_MS>;
                        quick-tap-ms = <HRM_QUICK_TAP_MS>;
                        global-quick-tap-ms = <150>;   // requires PR #1387
                        hold-trigger-key-positions = <KEYS_RIGHT_SIDE KEYS_THUMBS>;
                        hold-trigger-on-release;       // requires PR #1423
                        #binding-cells = <2>;
                        bindings = <&mo>, <&kp>;
                };

                hlr: homerow_layer_right {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_LAYER_RIGHT";
                        flavor = HRM_BEHAVIOR;
                        tapping-term-ms = <HRM_TAPPING_TERM_MS>;
                        quick-tap-ms = <HRM_QUICK_TAP_MS>;
                        global-quick-tap-ms = <150>;   // requires PR #1387
                        hold-trigger-key-positions = <KEYS_LEFT_SIDE KEYS_THUMBS>;
                        hold-trigger-on-release;       // requires PR #1423
                        #binding-cells = <2>;
                        bindings = <&mo>, <&kp>;
                };

                num_word_layer: behavior_num_word_layer {
                        // This creates a tap/hold behavior where tapping
                        // activates numword and holding is a temporary layer
                        // shift to numbers.
                        //
                        // Requires PR #1451.
                        //
                        // The first binding (param) to this behavior will be
                        // the momentary layer, and the second binding is
                        // ignored (but required by the underlying
                        // hold-tap behavior).
                        //
                        // Make sure to initialize the num-word behavior
                        // in the configuration.
                        compatible = "zmk,behavior-hold-tap";
                        label = "NUM_WORD_LAYER";
                        #binding-cells = <2>;
                        bindings = <&mo>, <&num_word>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <QUICK_TAP_MS>;
                };
        };

        macros {
                ZMK_MACRO(digraph_kn,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp K &kp N>;
                )

                ZMK_MACRO(digraph_qu,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp Q &kp U>;
                )

                ZMK_MACRO(digraph_ue,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp U &kp E>;
                )

                ZMK_MACRO(digraph_ch,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp C &kp H>;
                )

                ZMK_MACRO(digraph_sh,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp S &kp H>;
                )

                ZMK_MACRO(digraph_th,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp T &kp H>;
                )

                ZMK_MACRO(symbol_double_equal,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp EQUAL &kp EQUAL>;
                )

                ZMK_MACRO(symbol_not_equal,
                        wait-ms = <MACRO_WAIT_MS>;
                        tap-ms = <MACRO_TAP_MS>;
                        bindings = <&kp LS(N1) &kp EQUAL &kp EQUAL>;
                )

//                 ZMK_MACRO(word_and,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp A &kp N &kp D>;
//                 )
//
//                 ZMK_MACRO(word_the,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp T &kp H &kp E>;
//                 )
//
//                 ZMK_MACRO(word_git,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp G &kp I &kp T>;
//                 )
//
//                 ZMK_MACRO(word_poetry,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp P &kp O &kp E &kp T &kp R &kp Y>;
//                 )
//
//                 ZMK_MACRO(word_class,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp C &kp L &kp A &kp S &kp S>;
//                 )
//
//                 ZMK_MACRO(word_def,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings = <&kp D &kp E &kp F>;
//                 )
//
//                 ZMK_MACRO(word_true,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings
//                                 = <&macro_press &kp LSHIFT>
//                                 , <&macro_tap &kp T>
//                                 , <&macro_release &kp LSHIFT>
//                                 , <&macro_tap &kp R &kp U &kp E>;
//                 )
//
//                 ZMK_MACRO(word_false,
//                         wait-ms = <30>;
//                         tap-ms = <30>;
//                         bindings
//                                 = <&macro_press &kp LSHIFT>
//                                 , <&macro_tap &kp F>
//                                 , <&macro_release &kp LSHIFT>
//                                 , <&macro_tap &kp A &kp L &kp S &kp E>;
//                 )
         };

#include "combos.dtsi"

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "DEFAULT";
                        bindings = <
   &num_word_layer L_SYMBOL 0 &kp Q       &kp W       &hll L_SYMBOL F &kp P         &kp B                           &kp J               &kp L        &hll L_SYMBOL U &kp Y       &kp SQT     &kp BSPC
   &sl L_FUNCTION             &hml LGUI A &hml LALT R &hml LSHFT S    &hml LCTRL T  &kp G                           &kp M               &hmr RCTRL N &hmr RSHFT E     &hmr RALT I &hmr RGUI O &kp SEMI
   &sl L_CONTROL              &kp Z       &kp X       &kp C           &kp D         &kp V                           &kp K               &kp H        &kp COMMA        &kp DOT     &kp FSLH    &sl L_CONTROL
                                                                      &kp BSPC      &sk LSHFT &key_repeat &kp ENTER &lt L_EXTEND SPACE  &sl L_SYMBOL
                        >;
                };

                extend_layer {
                        label = "EXTEND";
                        bindings = <
    &trans  &kp ESC   &kp C_AC_BACK &kp LC(F) &kp C_AC_FORWARD &kp INS                       &kp PG_UP     &kp HOME &kp UP    &kp END   &trans    &trans
    &trans  &kp LGUI  &kp LALT      &kp LSHFT &kp LCTRL        &trans                        &kp PG_DN     &kp LEFT &kp DOWN  &kp RIGHT &kp DEL   &trans
    &trans  &kp LC(Z) &kp LC(X)     &kp LC(C) &trans           &kp LC(V)                     &kp LG(LS(S)) &trans   &kp TAB   &kp K_APP &trans    &trans
                                                &trans           &trans    &trans    &trans    &trans &trans
                        >;
                };

                symbol_layer {
                        label = "SYMBOL";
                        bindings = <
    &kp TILDE &kp EXCL  &kp AT    &kp HASH &kp COLON &kp PRCNT                  &kp STAR  &kp N7   &kp N8   &kp N9   &kp PLUS  &trans
    &kp GRAVE &kp SEMI  &kp UNDER &kp LBKT &kp LPAR  &kp LBRC                   &kp EQUAL &kp N4   &kp N5   &kp N6   &kp MINUS &kp PIPE
    &trans    &kp CARET &kp DLLR  &kp RBKT &kp RPAR  &kp RBRC                   &kp N0    &kp N1   &kp N2   &kp N3   &kp FSLH  &kp BSLH
                                          &trans    &trans   &trans   &trans    &trans    &trans
                        >;
                };

                function_layer {
                        label = "FUNC";
                        bindings = <
    &trans   &trans   &trans   &trans    &trans    &sl L_CONTROL               &kp F12   &kp F7   &kp F8   &kp F9   &kp LC(PLUS)  &trans
    &trans   &kp LGUI &kp LALT &kp LSHFT &kp LCTRL &trans                      &kp F11   &kp F4   &kp F5   &kp F6   &kp LC(MINUS) &trans
    &trans   &trans   &trans   &trans    &trans    &trans                      &kp F10   &kp F1   &kp F2   &kp F3   &kp LC(0)     &trans
                                         &trans    &trans   &trans   &kp ENTER &kp ESC   &trans
                        >;
                };

//                 words_layer {
//                         label = "WORDS";
//                         bindings = <
//     &trans   &trans   &trans   &trans    &trans    &trans                     &trans   &word_def  &word_class  &trans   &trans   &trans
//     &trans   &trans   &trans   &word_and &word_the &trans                     &trans   &word_true &word_false  &trans   &trans   &trans
//     &trans   &trans   &trans   &trans    &trans    &trans                     &trans   &word_git  &word_poetry &trans   &trans   &trans
//                                          &trans    &trans   &trans   &trans   &trans   &trans
//                         >;
//                 };

                control_layer {
                        label = "CONTROL";
                        bindings = <
    &bootloader &trans       &trans       &trans       &trans       &out OUT_USB                   &bt BT_CLR &trans   &trans   &trans   &trans   &bootloader
    &reset      &trans       &trans       &trans       &trans       &out OUT_BLE                   &trans     &trans   &trans   &trans   &trans   &reset
    &trans      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                   &trans     &trans   &trans   &trans   &trans   &trans
                                                       &trans       &trans       &trans   &trans   &trans     &trans
                        >;
                };
        };

//                 template {
//                         label = "EXTEND";
//                         bindings = <
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans
//                                         &trans   &trans   &trans   &trans   &trans   &trans
//                         >;
//                 };
};
