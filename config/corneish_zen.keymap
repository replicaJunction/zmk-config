/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer { // 0
                        label = "DEFAULT";
                        bindings = <
   &kp TAB   &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SQT  &kp BSPC
   &kp LCTRL &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O    &kp SEMI
   &kp LSHFT &kp Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &sl 1    &kp LSHFT   &kp SPACE &sl 2 &kp RALT
                        >;
                };

                extend_layer { // 1
                        label = "EXTEND";
                        bindings = <
    &trans    &kp ESC   &kp K_BACK &kp LC(F) &kp K_FORWARD &kp INS                     &kp PG_UP &kp HOME  &kp UP    &kp END   &trans    &trans   
    &trans    &sk LGUI  &sk LALT   &sk LSHFT &sk LCTRL     &trans                      &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT &kp DEL   &trans   
    &trans    &kp LC(Z) &kp LC(X)  &kp LC(C) &trans        &kp LC(V)                   &trans    &kp BSPC  &kp TAB   &kp K_APP &trans    &trans   
                                            &trans         &trans    &trans    &trans  &kp ENTER &trans
                        >;
                };

                symbol_layer { // 2
                        label = "SYMBOL";
                        bindings = <
    &trans   &kp EXCL  &kp AT    &kp HASH &kp DLLR &kp PRCNT                  &kp STAR  &kp N7   &kp N8   &kp N9   &kp PLUS  &trans
    &trans   &kp SEMI  &kp COLON &kp LBKT &kp LPAR &kp LBRC                   &kp EQUAL &kp N4   &kp N5   &kp N4   &kp EQUAL &trans
    &trans   &kp CARET &kp UNDER &kp RBKT &kp RPAR &kp RBRC                   &kp N0    &kp N1   &kp N2   &kp N3   &kp FSLH  &trans
                                          &trans   &trans   &trans   &trans   &trans    &trans
                        >;
                };

                function_layer {
                        label = "FUNC";
                        bindings = <
    &trans   &trans   &trans   &trans    &trans    &sl 3                      &kp F12   &kp F7   &kp F8   &kp F9   &kp LC(PLUS)  &trans   
    &trans   &sk LGUI &sk LALT &sk LSHFT &sk LCTRL &trans                     &kp F11   &kp F4   &kp F5   &kp F6   &kp LC(MINUS) &trans   
    &trans   &trans   &trans   &trans    &trans    &trans                     &kp F10   &kp F1   &kp F2   &kp F3   &kp LC(0)     &trans   
                                         &trans    &trans   &trans   &trans   &kp ENTER &trans
                        >;
                };

                control_layer { // 3
                        label = "CONTROL";
                        bindings = <
    &bootloader &trans       &trans       &trans       &trans       &out OUT_USB                   &trans   &trans   &trans   &trans   &trans   &bootloader   
    &reset      &trans       &trans       &trans       &trans       &out OUT_BLE                   &trans   &trans   &trans   &trans   &trans   &reset
    &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                   &trans   &trans   &trans   &trans   &trans   &trans   
                                                       &trans       &trans       &trans   &trans   &trans   &trans
                        >;
                };
        };

//                 template {
//                         label = "EXTEND";
//                         bindings = <
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans   
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans   
//     &trans   &trans   &trans   &trans   &trans   &trans                     &trans   &trans   &trans   &trans   &trans   &trans   
//                                         &trans   &trans   &trans   &trans   &trans   &trans
//                         >;
//                 };
//         };

        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_esc {
                        // Left hand, home row middle + index -> escape
                        bindings = <&kp ESC>;
                        key-positions = <15 16>;
                        layers = <0>;
                        timeout-ms = <50>;
                };
        };
};
